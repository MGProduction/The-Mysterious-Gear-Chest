local anim = require "adv/lua.anim"
local gop = require "adv/lua.gop"
local adv = require "adv/lua/adventure"

go.property("player", 0)
go.property("visible", true)

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	self.gop = gop.get()
	
	self.eyesfollow=2
	self.speedadjust=false
	
	self.blockingareas=nil
	self.stop=false
	self.moving=false
	self.idle=true
	self.name="hero"
	self.suffix=""
	self.speed=64
	self.normalspeed=64
	self.alwaysusewalk=true
	self.lock=0
	self.width=go.get("#sprite", "size.x")
	self.height=go.get("#sprite", "size.y")	
	self.rposition=vmath.vector3()	
	self.position=vmath.vector3()
	--self.usescale=true
	if self.usescale then
		self.srposition=vmath.vector3()
		self.scale=vmath.vector3()
		self.scale.x=0.75
		self.scale.y=0.75
	end
	self.updatesize=true
	self.facing=anim.RIGHT	
end

function calcz(self)
	if self.rposition.x<0 or (background_width and self.rposition.x>background_width) then
		self.rposition.z=-10
	else
		self.rposition.z=0.1+0.5-((self.rposition.y-self.height/2)/screen_h)*0.5		
	end
	if self.usescale then
		local fpos=self.rposition.y-self.height/2
		local scale=0.75-(fpos-40)/40*0.25		
		self.scale.x=scale
		self.scale.y=scale
		go.set("#sprite", "scale", self.scale)
		go.set("#spritehead", "scale", self.scale)
		go.set("#spriteobj", "scale", self.scale)
		go.set("#shadow", "scale", self.scale)
	end
	if self.owndeltaz then
		self.rposition.z=self.rposition.z+self.owndeltaz
	end
end

function digitalizeactor(self)
	if 1== 0 then
	else
		local width=go.get("#sprite", "size.x")
		local height=go.get("#sprite", "size.y")
		self.rposition.x=math.floor(self.position.x)
		self.rposition.y=math.floor(self.position.y)
		if(width % 2 == 1) then
			self.rposition.x=self.rposition.x-0.5
		end
		if(height % 2 == 1) then
			self.rposition.y=self.rposition.y-0.5
		end
	end
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)			
	if self.updatesize then
		self.width=go.get("#sprite", "size.x")
		self.height=go.get("#sprite", "size.y")
		self.updatesize=nil
		if self.speedadjust then
			self.speed=math.floor(self.width*2.0)
			self.normalspeed=math.floor(self.width*2.0)
		end
		if self.rposition == nil then
			local pos=go.get_position()				
			self.position.x=pos.x
			self.position.y=pos.y
			self.rposition.x=pos.x
			self.y=pos.y
		end
	end
	--self.position=go.get_position()	
	if self.leader then
		local pos=go.get_position(self.leader)
		local x=(self.position.x)
		if math.abs(x-pos.x)>self.leaderdistance*3/2 or self.alertformovement then
			if x>pos.x then
				pos.x=pos.x+self.leaderdistance
			else
				pos.x=pos.x-self.leaderdistance
			end
			self.destination=vmath.vector3(pos.x,self.position.y,self.position.z)
		else
			self.destination=nil
		end
	end
	if self.movecamerato==true then
		local pos=vmath.vector3(self.position.x,self.position.y,self.position.z)
		local more=32
		if (camerapos.x+more) > pos.x then
			pos.x = (camerapos.x+more) - self.speed*dt/120
		else
			pos.x = (camerapos.x+more) + math.max(1,self.speed*dt)
		end
		if math.abs((camerapos.x+more)-self.position.x)<2 then
			pos.x=self.position.x
			self.movecamerato=nil
			msg.post("/actors", "cameramovementalert")
		end		
		msg.post("camera", "follow", { position = pos })			
	end	
	if self.stop==true then
	elseif self.destination then
		local opos
		self.moving=false		
		opos=vmath.vector3(self.position.x,self.position.y,self.position.z)
		if math.abs(self.position.x-self.destination.x)<math.max(1,self.normalspeed*dt) then
			self.position.x=self.destination.x
			if self.sdestination then
				self.destination.x=self.sdestination.x
				self.destination.y=self.sdestination.y
				self.sdestination=nil
			else
				--self.destination=nil
				if self.alertformovement then
					self.alertformovement=nil
					msg.post("/actors", "movementalert")
				end
			end
		else
			if self.leader==nil and math.abs(self.position.x - self.destination.x ) > self.normalspeed*dt*10 then
				self.speed=self.normalspeed+self.normalspeed/2
			else
				self.speed=self.normalspeed
			end
			if self.position.x > self.destination.x then
				self.position.x =self.position.x - self.speed*dt
				self.facing=anim.LEFT
				self.moving=true
			elseif self.position.x < self.destination.x then
				self.position.x =self.position.x + self.speed*dt 
				self.facing=anim.RIGHT
				self.moving=true
			end
		end
		if math.abs(self.position.y-self.destination.y)<math.max(1,self.normalspeed*dt) then
			self.position.y=self.destination.y
		else
			if self.position.y > self.destination.y then
				self.position.y =self.position.y - self.speed*dt/2
				self.moving=true
			elseif self.position.y < self.destination.y then
				self.position.y =self.position.y + self.speed*dt/2
				self.moving=true
			end
		end
		if self.blockingareas then
			local dir
			if opos.x<self.position.x then dir=1 
			elseif opos.x>self.position.x then dir=-1 
			end
			for i, v in ipairs(self.blockingareas) do
				if ( (dir==1) and self.position.x<v.pos.x and self.position.x+self.width/2 >= v.pos.x-v.size.x/2 ) or ( (dir==-1)	and self.position.x>v.pos.x and self.position.x-self.width/2 <= v.pos.x+v.size.x/2 ) then
					self.position.x=opos.x
					self.moving=false					
					if self.alertformovement then
						self.alertformovement=nil
						msg.post("/actors", "movementalert")
					end		
					if v.alert then
						self.destination=nil
						msg.post("/actors", "movementalert",{alert=v.alert})
					end			
					break
				end
			end
		end
		if self.lock==0 then
			if self.moving==true then
				if self.speed==self.normalspeed or self.alwaysusewalk then
					anim.play_animation(self,self.name..".walk"..self.suffix,self.facing)					
					self.updatesize=true
				else
					anim.play_animation(self,self.name..".run"..self.suffix,self.facing)
				end
				self.idle=false
				self.idlerev=false	
			else
				if self.idlerev then
					anim.play_animation(self,self.name..".idlerev"..self.suffix,self.facing)				
				else
					anim.play_animation(self,self.name..".idle"..self.suffix,self.facing)				
				end
				self.idle=true
			end
		end
		digitalizeactor(self)
		calcz(self)
		if self.usescale then
			self.srposition.x=self.rposition.x
			self.srposition.y=self.rposition.y-(self.height/2-self.height*self.scale.y/2)
			self.srposition.z=self.rposition.z
			go.set_position(self.srposition)			
		else
			go.set_position(self.rposition)			
		end
		self.gop.rposition=self.rposition
		if self.ref then
			--self.ref.pos=self.position
			update_ref(self,self.position)
		end		
		if self.follow==true then
			msg.post("camera", "follow", { position = self.position })
		end
	else
		if self.player == 1 then
		else
			if self.stop==true or self.autofacinglocked then
			else
				if global_hero then
					local heropos=go.get_position(global_hero)
					if self.position.x > heropos.x then
						self.facing=1
					elseif self.position.x < heropos.x then
						self.facing=0
					end
				end
			end
			if self.lock==0 then
				anim.play_animation(self,self.name..".idle"..self.suffix,self.facing)
				self.idle=true
			else
				anim.play_animation(self,nil,self.facing)
			end			
		end			
		digitalizeactor(self)
		--self.rposition.z=0.1+0.5-((self.rposition.y-self.height/2)/screen_h)*0.5		
		calcz(self)
		if self.usescale then
			self.srposition.x=self.rposition.x
			self.srposition.y=self.rposition.y-(self.height/2-self.height*self.scale.y/2)
			self.srposition.z=self.rposition.z
			go.set_position(self.srposition)			
		else
			go.set_position(self.rposition)			
		end
		self.gop.rposition=self.rposition
		if self.ref then
			--self.ref.pos=self.position
			update_ref(self,self.position)
		end
	end	
end

function update_ref(self,pos)
	if self.ref then
		if self.ref == "player" then
			adv.tplayer.pos=pos
			--if camerapos then adv.tplayer.pos.x=adv.tplayer.pos.x+camerapos.x end
		else
			for i,obj in ipairs(adv.actors) do
				if obj.name==self.ref then
					if obj.disabled then
					else
						obj.pos=pos
						--if camerapos then obj.pos.x=obj.pos.x+camerapos.x end
					end
					break;
				end
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("animation_done") then
		if self.alertforanim then
			self.alertforanim=nil
			msg.post("/actors", "animationalert")
		end
	elseif message_id==hash("lockanim") then
		if self.lock==0 then
			self.pre_lockanim=self.current_anim
			self.lockanim=message.anim
			anim.play_animation(self,self.name.."."..message.anim..self.suffix,self.facing)
			self.alertforanim=message.alert
		end
		if message.stopmovement then
			if self.destination then
				self.destination.x=self.position.x
				if self.alertformovement then
					self.alertformovement=nil
					msg.post("/actors", "movementalert")
				end
			end
		end
		self.lock=self.lock+1
	elseif message_id==hash("unlockanim") then	
		if message.kind=="all" then
			self.lock=0
		elseif self.lock > 0 then
			self.lock=self.lock-1
		end
		if self.lock==0 then
			self.lockanim=nil
			if self.pre_lockanim then
				anim.play_animation(self,self.pre_lockanim,self.facing)
				self.pre_lockanim=nil
			end
		else
			local l=1
		end		
	elseif message_id==hash("move_to") then		
		if message.xonly==true then
			local pos
			self.destination=go.get_position(pos)
			self.destination.x=message.destination.x
		else
			self.destination=message.destination
		end						
		self.sdestination=message.sdestination
		--self.follow=message.follow	
		if message.alert==true then
			self.alertformovement=true
		end
	elseif message_id==hash("look_at") then
		if self.idle==true and self.moving==false and self.stop~=true then
			local facing=self.facing
			if message.lookat then
				if self.position.x-8 > message.lookat.x then
					facing=anim.LEFT
				elseif self.position.x+8 < message.lookat.x then
					facing=anim.RIGHT
				end		
			end
			if self.eyesfollow==1 or message.mode=="turn" or message.mode=="lock" then
				if facing==self.facing then					
				else			
					self.facing=facing					
					if self.lockanim then
						anim.play_animation(self,self.name.."."..self.lockanim..self.suffix,self.facing)
					else
						anim.play_animation(self,self.name..".idle"..self.suffix,self.facing)
					end
					self.idlerev=false	
				end
			elseif self.eyesfollow==2 then
				if facing==self.facing then
					if self.lockanim then
					else
						anim.play_animation(self,self.name..".idle"..self.suffix,self.facing)
						self.idlerev=false						
					end
				else								
					if self.lockanim then
						anim.play_animation(self,self.name.."."..self.lockanim..self.suffix,self.facing)
					else
						anim.play_animation(self,self.name..".idlerev"..self.suffix,self.facing)				
						self.idlerev=true
					end
				end
			end
			if message.mode=="turn" then
			else
				if message.mode=="lock" then
					self.autofacinglocked=true
				else
					self.autofacinglocked=nil
				end
			end
		end
	elseif message_id==hash("set_ref") then
		self.ref=message.ref
	elseif message_id==hash("movecamera_to") then
		self.position=go.get_position()
		self.movecamerato=true
	elseif message_id==hash("set_to") then
		self.position=go.get_position()
		if message.ownz then
			self.owndeltaz=message.ownz
		end
		if message.destination then
			if message.xonly==true then				
				self.position.x=message.destination.x
			else
				self.position=message.destination
			end		
			go.set_position(self.position)
		end
		if message.follow==-1 then
		else
			self.follow=message.follow		
		end
		if self.follow==true then
			if global_follow and global_follow~=msg.url(".") then
				msg.post(global_follow,"set_to")				
			end
			global_follow=msg.url(".")
			if message.dontupdate then
			else
				msg.post("camera", "follow", { position = self.position })
			end
			self.alertformovement=nil
		end
		if self.ref then
			update_ref(self,self.position)
			--self.ref.pos=self.position
		end
	elseif message_id==hash("show") then
		self.visible=message.visible
		if self.visible==false then
			go.set("#sprite", "tint",vmath.vector4(1,1,1,0))
			go.set("#spritehead", "tint",vmath.vector4(1,1,1,0))
			go.set("#spriteobj", "tint",vmath.vector4(1,1,1,0))
			go.set("#shadow", "tint",vmath.vector4(1,1,1,0))
		else
			go.set("#sprite", "tint",vmath.vector4(1,1,1,1))
			go.set("#spritehead", "tint",vmath.vector4(1,1,1,1))
			go.set("#spriteobj", "tint",vmath.vector4(1,1,1,1))
			go.set("#shadow", "tint",vmath.vector4(1,1,1,1))
		end
	elseif message_id==hash("addblockingarea") then	
		local area={}
		area["pos"]=message.pos
		area["size"]=message.size
		area["name"]=message.name
		area["alert"]=message.alert
		if self.blockingareas==nil then
			self.blockingareas={}
		end
		table.insert(self.blockingareas, area)
	elseif message_id==hash("delblockingarea") then	
		if self.blockingareas then
			for i, v in ipairs(self.blockingareas) do
				if v.name==message.name then
					table.remove(self.blockingareas,i)
				end
			end
		end
		if self.blockingareas and #self.blockingareas == 0 then
			self.blockingareas=nil
		end
	elseif message_id==hash("resetblockingareas") then	
		self.blockingareas=nil
	elseif message_id==hash("stop") then	
		self.stop=true
	elseif message_id==hash("update_size") then
		self.width=go.get("#sprite", "size.x")
		self.height=go.get("#sprite", "size.y")		
	elseif message_id==hash("set_leader") then
		self.leader=message.leader
		if message.leader then			
			self.leaderdistance=math.random(40,60)
		end
	elseif message_id==hash("set_suffix") then
		self.suffix=message.name		
		self.idle=true
		anim.play_animation(self,self.name..".idle"..self.suffix,self.facing)
	elseif message_id==hash("set_prop") then
		if message.name then
			self.prop=message.name.."_"
			anim.update_prop(self)
		else
			self.prop=nil
			anim.update_prop(self)
		end
	elseif message_id==hash("set_name") then
		self.name=message.name
		if message.head then
			self.head=message.head
		else
			self.head=nil
		end
		anim.play_animation(self,self.name..".idle"..self.suffix,self.facing)		
		if message.shadow then
			msg.post("#shadow", "play_animation", { id = hash(message.shadow) })
		end		
		self.idle=true
		msg.post(".","update_size")
		local offset=vmath.vector3(0,self.height/2,0)
		
		self.position=go.get_position()		
		--self.position.z=10.1+0.5-((self.position.y-self.height/2)/screen_h)*0.5
		go.set_position(self.position)
		self.updatesize=true
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
